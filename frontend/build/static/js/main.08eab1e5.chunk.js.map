{"version":3,"sources":["sudoku/components/Button.tsx","sudoku/components/ButtonCheck.tsx","sudoku/index.tsx","range.tsx","sudoku/services/SudokuService.tsx","sudoku/context/BoardProvider.tsx","sudoku/components/Board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Buttons","disabled","loading","text","optionalClassName","onClick","btnRef","useRef","useEffect","btn","current","onmousemove","event","style","backgroundPosition","offsetX","clientWidth","offsetY","clientHeight","className","ref","Fragment","ButtonCheck","value","onChange","type","defaultChecked","DEFAULT_BOARD","range","start","stop","step","result","i","push","SudokuService","state","initialBoard","board","_isPossible","x","y","j","squareX","Math","floor","squareY","this","_parseStateToBoard","Set","row","col","rowRecord","colRecord","boxRecord","has","add","setState","n","prev","String","solve","a","_sleep","solveAsync","Promise","resolve","JSON","stringify","rows","parseInt","milliseconds","setTimeout","BoardContext","createContext","BoardProvider","props","useState","willSolveAsync","setWillSolveAsync","isSolving","setIsSolving","didSolve","setDidSolve","setDefaultBoardToState","obj","context","clearBoard","Provider","children","Board","useContext","handleOnClick","Object","values","every","val","sudokuBoard","isValid","map","Row","num","Box","name","maxLength","autoComplete","validValues","target","includes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08eab1e5.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\n\ninterface ButtonProps {\n  disabled: boolean;\n  loading: boolean;\n  text: string;\n  optionalClassName?: string;\n  onClick: () => any;\n}\n\nexport default function Buttons({ disabled, loading, text, optionalClassName, onClick }: ButtonProps) {\n\n  let btnRef = useRef<HTMLButtonElement>(null)\n  useEffect(() => {\n    const btn = btnRef.current!\n\n    btn.onmousemove = event => {\n      btn.style.backgroundPosition = (`\n        ${event.offsetX - btn.clientWidth}px\n        ${event.offsetY - btn.clientHeight}px\n      `);\n    }\n\n  }, [btnRef])\n\n  return (\n    <button\n      disabled={disabled}\n      className={`btn ${loading ? '--is-loading' : ''} ${optionalClassName}`}\n      onClick={onClick}\n      ref={btnRef}\n    >\n      {loading ?\n        <React.Fragment>\n          <span>{'\\u22C5'}</span>\n          <span>{'\\u22C5'}</span>\n          <span>{'\\u22C5'}</span>\n        </React.Fragment> : text\n      }\n    </button>\n  )\n}","\ninterface ButtonCheckProps {\n  value: boolean;\n  onChange: React.Dispatch<boolean>;\n}\n\nexport default function ButtonCheck({ value, onChange }: ButtonCheckProps) {\n  return (\n    <div className=\"toggle\">\n      <label className=\"switch\">\n        <input type=\"checkbox\" defaultChecked={value} onChange={() => onChange(!value)} />\n        <span className=\"slider round\" />\n      </label>\n      <small>Solve asynchronously</small>\n    </div>\n  )\n}\n","export const ROWS = 9\nexport const COLS = 9\nexport const SQUARES = 9\n\nexport const DEFAULT_BOARD = [\n  [5, 0, 1, 6, 2, 7, 0, 0, 0],\n  [8, 2, 0, 0, 9, 0, 0, 1, 3],\n  [6, 4, 0, 0, 0, 0, 0, 0, 0],\n  [9, 6, 0, 4, 0, 1, 3, 0, 0],\n  [0, 8, 0, 7, 3, 0, 4, 2, 9],\n  [0, 0, 4, 9, 0, 0, 5, 0, 0],\n  [0, 0, 6, 0, 7, 5, 0, 3, 0],\n  [2, 0, 0, 3, 6, 9, 0, 0, 5],\n  [0, 5, 0, 0, 0, 0, 1, 9, 0]\n]","/**\n * Helper-function for loops, similar to that of Pythons range().\n * If only one argument is passed, {start} is 0, {step} is 1 and {stop} is the argument.\n * @param {number} start An integer number.\n * @param {number} [stop] An integer number.\n * @param {number} [step] An integer number specifying the progression.\n * @return {Array} A list of arithmetic progressions.\n */\nexport function range(start: number, stop?: number, step?: number): Array<number> {\n  if (typeof stop == 'undefined') {\n    stop = start;\n    start = 0;\n  }\n\n  if (typeof step == 'undefined') {\n    step = 1;\n  }\n\n  if ((step > 0 && start >= stop) || (step < 0 && start <= stop)) {\n    return [];\n  }\n\n  var result = [];\n  for (var i = start; step > 0 ? i < stop : i > stop; i += step) {\n    result.push(i);\n  }\n\n  return result;\n};\n","import type { Dispatch, SetStateAction } from 'react';\nimport type { BoardState } from '../types';\nimport { ROWS, COLS } from '../index';\nimport { range } from '../../range';\n\n/**\n * Class for handling sudoku-board operations.\n * @param {BoardState} state State from the Board-component.\n * \n * @property {number[][]} initialBoard: The initial board. Will not be modified.\n * @property {number[][]} board: The main board. Will be modified.\n */\nexport default class SudokuService {\n\n  initialBoard: number[][];\n  board: number[][];\n\n  constructor(state: BoardState) {\n    this.initialBoard = this._parseStateToBoard(state);\n    this.board = this._parseStateToBoard(state);\n  }\n\n  /**\n   * Check if the sudoku-board is valid. \n   * @return {boolean} Return true if the board is valid, else false.\n   */\n  isValid(): boolean {\n    let state = new Set();\n\n    for (let row of range(ROWS)) {\n      for (let col of range(COLS)) {\n        const value = this.board[row][col];\n\n        if (value === 0) continue;\n\n        const rowRecord = `row ${row} value ${value}`;\n        const colRecord = `col ${col} value ${value}`;\n        const boxRecord = `box ${Math.floor(row / 3)} / ${Math.floor(col / 3)} value ${value}`;\n\n        if (state.has(rowRecord) || state.has(colRecord) || state.has(boxRecord)) {\n          return false;\n        }\n\n        state.add(rowRecord);\n        state.add(colRecord);\n        state.add(boxRecord);\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Recursive function.\n   * Solve the sudoku-board by trying values and then backtrack if the value is not \"legal\".\n   * Also, update state of the displayed board.\n   * @param {SetStateAction<BoardState>} setState Update function for displayed board state.\n   * @return {boolean} Return true if solved or closer to solving, else false.\n   */\n  solve(setState: Dispatch<SetStateAction<BoardState>>): boolean {\n    for (let row of range(ROWS)) {\n      for (let col of range(COLS)) {\n        if (this.board[row][col] === 0) {\n          for (let n of range(1, 10)) {\n            if (this._isPossible(row, col, n)) {\n\n              this.board[row][col] = n;\n              setState!(prev => ({ ...prev, [`r${row}c${col}`]: String(n) }));\n\n              if (this.solve(setState)) {\n                return true;\n              } else {\n                this.board[row][col] = 0;\n                setState!(prev => ({ ...prev, [`r${row}c${col}`]: '' }));\n              }\n            }\n          }\n\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Recursive function. Async implementation of solve(). \n   * This allows for the displayed board to update through each iteration. \n   * @return {boolean} Return true if solved or closer to solving, else false.\n   */\n  async solveAsync(setState: Dispatch<SetStateAction<BoardState>>): Promise<boolean> {\n    await this._sleep(1);\n\n    for (let row of range(ROWS)) {\n      for (let col of range(COLS)) {\n        if (this.board[row][col] === 0) {\n          for (let n of range(1, 10)) {\n            if (this._isPossible(row, col, n)) {\n\n              this.board[row][col] = n;\n              setState!(prev => ({ ...prev, [`r${row}c${col}`]: String(n) }));\n\n              if (await this.solveAsync(setState)) {\n                return Promise.resolve(true);\n              } else {\n                this.board[row][col] = 0;\n                setState!(prev => ({ ...prev, [`r${row}c${col}`]: '' }));\n              }\n            }\n          }\n\n          return Promise.resolve(false);\n        }\n      }\n    }\n\n    return Promise.resolve(true);\n  }\n\n  /**\n   * Compare initialBoard to board. \n   * If the boards are the same, the puzzle was not solved.\n   * @return {boolean} Return true if the boards are not equal, else false.\n   */\n  didSolve(): boolean {\n    return JSON.stringify(this.initialBoard) !== JSON.stringify(this.board);\n  }\n\n  /**\n   * Check if {value} can be placed in {x} row and {y} column.\n   * @param {number} x Row of the board.\n   * @param {number} y Column of the board.\n   * @param {number} value The number to check.\n   * @return {boolean} Return true if {value} is \"legal\", else false.\n   */\n  _isPossible = (x: number, y: number, value: number): boolean => {\n    for (let i of range(3)) {\n      for (let j of range(3)) {\n        if (this.board[x][i * 3 + j] === value) return false;\n        if (this.board[i * 3 + j][y] === value) return false;\n\n        const squareX = Math.floor(x / 3) * 3;\n        const squareY = Math.floor(y / 3) * 3;\n\n        if (this.board[squareX + i][squareY + j] === value) return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Parse board-state to a 9x9 matrix.\n   * @param {BoardState} state The state of the board.\n   * @return {number[][]} The sudoku-board as a 9x9 matrix.\n   */\n  _parseStateToBoard(state: BoardState): number[][] {\n    const board = []\n\n    for (let row of range(ROWS)) {\n      const rows = []\n\n      for (let col of range(COLS)) {\n        if (state[`r${row}c${col}`]) {\n          rows.push(parseInt(state[`r${row}c${col}`]))\n        } else {\n          rows.push(0)\n        }\n      }\n\n      board.push(rows)\n    }\n\n    return board\n  }\n\n  /**\n   * Helper-function for solveAsync().\n   * @param {number} milliseconds How long the function should sleep.\n   * @return {Promise} A promise that resolves with a setTimeout.\n   */\n  async _sleep(milliseconds: number): Promise<typeof setTimeout> {\n    return new Promise(resolve => setTimeout(resolve, milliseconds));\n  }\n}\n","import type { BoardState, Context } from '../types';\nimport { createContext, useEffect, useState } from 'react';\nimport { ROWS, COLS, DEFAULT_BOARD } from '../index';\nimport { range } from '../../range';\n\nexport const BoardContext = createContext<Partial<Context>>({})\n\ninterface BoardProviderProps {\n  children: JSX.Element;\n}\n\nexport default function BoardProvider(props: BoardProviderProps) {\n  const [state, setState] = useState({});\n  const [willSolveAsync, setWillSolveAsync] = useState(false);\n  const [isSolving, setIsSolving] = useState(false);\n  const [didSolve, setDidSolve] = useState<boolean | null>(null);\n\n  useEffect(() => { setDefaultBoardToState(); }, [])\n\n  function setDefaultBoardToState(): void {\n    setDidSolve(null);\n    setState(() => {\n      const obj: BoardState = {};\n\n      for (let row of range(ROWS)) {\n        for (let col of range(COLS)) {\n          obj[`r${row}c${col}`] = DEFAULT_BOARD[row][col] ? String(DEFAULT_BOARD[row][col]) : '';\n        }\n      }\n\n      return obj;\n    })\n  }\n\n  function clearBoard(): void {\n    setDidSolve(null);\n    setState(() => {\n      const obj: BoardState = {};\n\n      for (let row of range(ROWS)) {\n        for (let col of range(COLS)) {\n          obj[`r${row}c${col}`] = '';\n        }\n      }\n\n      return obj;\n    })\n  }\n\n  const context = {\n    state,\n    willSolveAsync,\n    isSolving,\n    didSolve,\n    setState,\n    setWillSolveAsync,\n    setIsSolving,\n    setDidSolve,\n    setDefaultBoardToState,\n    clearBoard\n  }\n\n  return (\n    <BoardContext.Provider value={context}>\n      {props.children}\n    </BoardContext.Provider>\n  )\n}\n","import React, { useContext } from 'react';\nimport Button from './Button';\nimport ButtonCheck from './ButtonCheck';\nimport SudokuService from '../services/SudokuService';\nimport { BoardContext } from '../context/BoardProvider';\nimport { ROWS, COLS, SQUARES } from '../index';\nimport { range } from '../../range';\n\nexport default function Board() {\n  const {\n    state,\n    willSolveAsync,\n    isSolving,\n    didSolve,\n    setState,\n    setWillSolveAsync,\n    setIsSolving,\n    setDidSolve,\n    setDefaultBoardToState,\n    clearBoard\n  } = useContext(BoardContext);\n\n  const handleOnClick = async () => {\n    setDidSolve!(null);\n\n    if (Object.values(state!).every(val => val)) {\n      return;\n    }\n\n    const sudokuBoard = new SudokuService(state!);\n\n    if (!sudokuBoard.isValid()) {\n      setDidSolve!(false);\n      return;\n    }\n\n    // We can only show loading indicators when solving asynchronously.\n    if (willSolveAsync) {\n      setIsSolving!(true);\n      await sudokuBoard.solveAsync(setState!);\n      setIsSolving!(false);\n    } else {\n      sudokuBoard.solve(setState!);\n    }\n\n    if (sudokuBoard.didSolve()) {\n      setDidSolve!(true);\n    } else {\n      setDidSolve!(false);\n    }\n  }\n\n  return (\n    <div className=\"board-container\">\n      <h1>Solve a sudoku-puzzle.</h1>\n      <p>Enter a valid sudoku puzzle below and I will solve it for you.</p>\n      <ButtonCheck value={willSolveAsync!} onChange={setWillSolveAsync!} />\n      <small className=\"note\">\n        NOTE: Solving asynchronously will repeatedly update the board as it is solving.\n        For tougher boards, this could take quite some time.\n      </small>\n\n      <div className=\"board\">\n        {range(ROWS).map(row => <Row key={row} row={row} />)}\n        <div className=\"overlay\">\n          {range(SQUARES).map(num => <div key={num} />)}\n        </div>\n      </div>\n\n      <Button\n        disabled={isSolving!}\n        loading={isSolving!}\n        text=\"Solve sudoku\"\n        onClick={handleOnClick}\n      />\n\n      <Button\n        disabled={isSolving!}\n        loading={isSolving!}\n        text=\"Clear board\"\n        onClick={() => clearBoard!()}\n        optionalClassName={'blue'}\n      />\n\n      <Button\n        disabled={isSolving!}\n        loading={isSolving!}\n        text=\"Set default board\"\n        onClick={() => setDefaultBoardToState!()}\n        optionalClassName={'orange'}\n      />\n\n      {didSolve !== null && didSolve && (\n        <h2 className=\"message success\">Board is solved.</h2>\n      )}\n\n      {didSolve !== null && !didSolve && (\n        <h2 className=\"message error\">There is no solution.</h2>\n      )}\n    </div>\n  )\n}\n\ninterface RowProps {\n  row: number;\n}\n\nfunction Row({ row }: RowProps) {\n  return (\n    <div className=\"row\">\n      {range(COLS).map(col => (\n        <Box key={col} name={`r${row}c${col}`} />\n      ))}\n    </div>\n  )\n}\n\ninterface BoxProps {\n  name: string;\n}\n\nfunction Box({ name }: BoxProps) {\n  const { state, setState, isSolving } = useContext(BoardContext);\n\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const validValues = range(1, 10).map(num => String(num)) + ' '\n    const value = event.target.value\n\n    if (validValues.includes(value)) {\n      setState!(prev => ({ ...prev, [event.target.name]: value }));\n    }\n  }\n\n  return (\n    <div className=\"box\">\n      <input\n        name={name}\n        maxLength={1}\n        autoComplete=\"off\"\n        disabled={isSolving}\n        value={state![name]}\n        onChange={handleOnChange}\n      />\n    </div>\n  )\n}","import Board from './sudoku/components/Board';\nimport BoardProvider from './sudoku/context/BoardProvider';\n\n\nexport default function App() {\n  return (\n    <div className=\"app\">\n      <nav className=\"navbar\">\n        Sudoku-solver\n      </nav>\n      <div className=\"main\">\n        <BoardProvider>\n          <Board />\n        </BoardProvider>\n      </div>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './_index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}